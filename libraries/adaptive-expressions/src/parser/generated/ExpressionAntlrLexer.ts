// Generated from src/parser/ExpressionAntlrLexer.g4 by ANTLR 4.7.3-SNAPSHOT

/**
 * @module adaptive-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';


export class ExpressionAntlrLexer extends Lexer {
    public static readonly STRING_INTERPOLATION_START = 1;
    public static readonly PLUS = 2;
    public static readonly SUBSTRACT = 3;
    public static readonly NON = 4;
    public static readonly XOR = 5;
    public static readonly ASTERISK = 6;
    public static readonly SLASH = 7;
    public static readonly PERCENT = 8;
    public static readonly DOUBLE_EQUAL = 9;
    public static readonly NOT_EQUAL = 10;
    public static readonly SINGLE_AND = 11;
    public static readonly DOUBLE_AND = 12;
    public static readonly DOUBLE_VERTICAL_CYLINDER = 13;
    public static readonly LESS_THAN = 14;
    public static readonly MORE_THAN = 15;
    public static readonly LESS_OR_EQUAl = 16;
    public static readonly MORE_OR_EQUAL = 17;
    public static readonly OPEN_BRACKET = 18;
    public static readonly CLOSE_BRACKET = 19;
    public static readonly DOT = 20;
    public static readonly OPEN_SQUARE_BRACKET = 21;
    public static readonly CLOSE_SQUARE_BRACKET = 22;
    public static readonly OPEN_CURLY_BRACKET = 23;
    public static readonly CLOSE_CURLY_BRACKET = 24;
    public static readonly COMMA = 25;
    public static readonly COLON = 26;
    public static readonly ARROW = 27;
    public static readonly NUMBER = 28;
    public static readonly WHITESPACE = 29;
    public static readonly IDENTIFIER = 30;
    public static readonly NEWLINE = 31;
    public static readonly STRING = 32;
    public static readonly INVALID_TOKEN_DEFAULT_MODE = 33;
    public static readonly TEMPLATE = 34;
    public static readonly ESCAPE_CHARACTER = 35;
    public static readonly TEXT_CONTENT = 36;
    public static readonly STRING_INTERPOLATION_MODE = 1;

    // tslint:disable:no-trailing-whitespace
    public static readonly channelNames: string[] = [
        'DEFAULT_TOKEN_CHANNEL', 'HIDDEN',
    ];

    // tslint:disable:no-trailing-whitespace
    public static readonly modeNames: string[] = [
        'DEFAULT_MODE', 'STRING_INTERPOLATION_MODE',
    ];

    public static readonly ruleNames: string[] = [
        'LETTER', 'DIGIT', 'OBJECT_DEFINITION', 'STRING_INTERPOLATION_START', 
        'PLUS', 'SUBSTRACT', 'NON', 'XOR', 'ASTERISK', 'SLASH', 'PERCENT', 'DOUBLE_EQUAL', 
        'NOT_EQUAL', 'SINGLE_AND', 'DOUBLE_AND', 'DOUBLE_VERTICAL_CYLINDER', 'LESS_THAN', 
        'MORE_THAN', 'LESS_OR_EQUAl', 'MORE_OR_EQUAL', 'OPEN_BRACKET', 'CLOSE_BRACKET', 
        'DOT', 'OPEN_SQUARE_BRACKET', 'CLOSE_SQUARE_BRACKET', 'OPEN_CURLY_BRACKET', 
        'CLOSE_CURLY_BRACKET', 'COMMA', 'COLON', 'ARROW', 'NUMBER', 'WHITESPACE', 
        'IDENTIFIER', 'NEWLINE', 'STRING', 'INVALID_TOKEN_DEFAULT_MODE', 'STRING_INTERPOLATION_END', 
        'TEMPLATE', 'ESCAPE_CHARACTER', 'TEXT_CONTENT',
    ];

    private static readonly _LITERAL_NAMES: (string | undefined)[] = [
        undefined, undefined, '\'+\'', '\'-\'', '\'!\'', '\'^\'', '\'*\'', '\'/\'', '\'%\'', 
        '\'==\'', undefined, '\'&\'', '\'&&\'', '\'||\'', '\'<\'', '\'>\'', '\'<=\'', '\'>=\'', 
        '\'(\'', '\')\'', '\'.\'', '\'[\'', '\']\'', '\'{\'', '\'}\'', '\',\'', '\':\'', '\'=>\'',
    ];
    private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
        undefined, 'STRING_INTERPOLATION_START', 'PLUS', 'SUBSTRACT', 'NON', 'XOR', 
        'ASTERISK', 'SLASH', 'PERCENT', 'DOUBLE_EQUAL', 'NOT_EQUAL', 'SINGLE_AND', 
        'DOUBLE_AND', 'DOUBLE_VERTICAL_CYLINDER', 'LESS_THAN', 'MORE_THAN', 'LESS_OR_EQUAl', 
        'MORE_OR_EQUAL', 'OPEN_BRACKET', 'CLOSE_BRACKET', 'DOT', 'OPEN_SQUARE_BRACKET', 
        'CLOSE_SQUARE_BRACKET', 'OPEN_CURLY_BRACKET', 'CLOSE_CURLY_BRACKET', 'COMMA', 
        'COLON', 'ARROW', 'NUMBER', 'WHITESPACE', 'IDENTIFIER', 'NEWLINE', 'STRING', 
        'INVALID_TOKEN_DEFAULT_MODE', 'TEMPLATE', 'ESCAPE_CHARACTER', 'TEXT_CONTENT',
    ];
    public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES, ExpressionAntlrLexer._SYMBOLIC_NAMES, []);

    // @Override
    // @NotNull
    public get vocabulary(): Vocabulary {
        return ExpressionAntlrLexer.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace


	  ignoreWS = true;      // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant


    constructor(input: CharStream) {
        super(input);
        this._interp = new LexerATNSimulator(ExpressionAntlrLexer._ATN, this);
    }

    // @Override
    public get grammarFileName(): string { return 'ExpressionAntlrLexer.g4'; }

    // @Override
    public get ruleNames(): string[] { return ExpressionAntlrLexer.ruleNames; }

    // @Override
    public get serializedATN(): string { return ExpressionAntlrLexer._serializedATN; }

    // @Override
    public get channelNames(): string[] { return ExpressionAntlrLexer.channelNames; }

    // @Override
    public get modeNames(): string[] { return ExpressionAntlrLexer.modeNames; }

    // @Override
    public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
        switch (ruleIndex) {
            case 3:
                this.STRING_INTERPOLATION_START_action(_localctx, actionIndex);
                break;

            case 36:
                this.STRING_INTERPOLATION_END_action(_localctx, actionIndex);
                break;
        }
    }
    private STRING_INTERPOLATION_START_action(_localctx: RuleContext, actionIndex: number): void {
        switch (actionIndex) {
            case 0:
			 this.ignoreWS = false;
                break;
        }
    }
    private STRING_INTERPOLATION_END_action(_localctx: RuleContext, actionIndex: number): void {
        switch (actionIndex) {
            case 1:
                this.ignoreWS = true;
                break;
        }
    }
    // @Override
    public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
            case 31:
                return this.WHITESPACE_sempred(_localctx, predIndex);
        }
        return true;
    }
    private WHITESPACE_sempred(_localctx: RuleContext, predIndex: number): boolean {
        switch (predIndex) {
            case 0:
                return this.ignoreWS;
        }
        return true;
    }

    public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02&\u0107\b\x01' +
		'\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06' +
		'\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f' +
		'\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04' +
		'\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04' +
		'\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04' +
		'\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04' +
		'"\t"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x03\x02' +
		'\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04]\n\x04' +
		'\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04c\n\x04\r\x04\x0E\x04d\x07\x04' +
		'g\n\x04\f\x04\x0E\x04j\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03' +
		'\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03' +
		'\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03' +
		'\x0E\x03\x0E\x05\x0E\x88\n\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10' +
		'\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14' +
		'\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18' +
		'\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C' +
		'\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x06 \xB2' +
		'\n \r \x0E \xB3\x03 \x03 \x06 \xB8\n \r \x0E \xB9\x05 \xBC\n \x03!\x03' +
		'!\x03!\x03!\x03!\x03"\x03"\x03"\x03"\x03"\x05"\xC8\n"\x03"\x03' +
		'"\x03"\x07"\xCD\n"\f"\x0E"\xD0\v"\x03#\x05#\xD3\n#\x03#\x03#\x03' +
		'#\x03#\x03$\x03$\x03$\x03$\x07$\xDD\n$\f$\x0E$\xE0\v$\x03$\x03$\x03$\x03' +
		'$\x03$\x07$\xE7\n$\f$\x0E$\xEA\v$\x03$\x05$\xED\n$\x03%\x03%\x03&\x03' +
		'&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x06\'\xFC\n\'\r\'' +
		'\x0E\'\xFD\x03\'\x03\'\x03(\x03(\x05(\u0104\n(\x03)\x03)\x04\xDE\xE8\x02' +
		'\x02*\x04\x02\x02\x06\x02\x02\b\x02\x02\n\x02\x03\f\x02\x04\x0E\x02\x05' +
		'\x10\x02\x06\x12\x02\x07\x14\x02\b\x16\x02\t\x18\x02\n\x1A\x02\v\x1C\x02' +
		'\f\x1E\x02\r \x02\x0E"\x02\x0F$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02' +
		'\x14.\x02\x150\x02\x162\x02\x174\x02\x186\x02\x198\x02\x1A:\x02\x1B<\x02' +
		'\x1C>\x02\x1D@\x02\x1EB\x02\x1FD\x02 F\x02!H\x02"J\x02#L\x02\x02N\x02' +
		'$P\x02%R\x02&\x04\x02\x03\f\x04\x02C\\c|\x03\x022;\t\x02\f\f\x0F\x0F$' +
		'$))bb}}\x7F\x7F\x06\x02\v\v""\xA2\xA2\uFF01\uFF01\x05\x02%%BBaa\x04' +
		'\x02))^^\x03\x02))\x04\x02$$^^\x03\x02$$\x04\x02\f\f\x0F\x0F\x02\u011C' +
		'\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02' +
		'\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02' +
		'\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02' +
		'\x1C\x03\x02\x02\x02\x02\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02' +
		'"\x03\x02\x02\x02\x02$\x03\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03' +
		'\x02\x02\x02\x02*\x03\x02\x02\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02' +
		'\x02\x020\x03\x02\x02\x02\x022\x03\x02\x02\x02\x024\x03\x02\x02\x02\x02' +
		'6\x03\x02\x02\x02\x028\x03\x02\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02' +
		'\x02\x02\x02>\x03\x02\x02\x02\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02' +
		'\x02D\x03\x02\x02\x02\x02F\x03\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03' +
		'\x02\x02\x02\x03L\x03\x02\x02\x02\x03N\x03\x02\x02\x02\x03P\x03\x02\x02' +
		'\x02\x03R\x03\x02\x02\x02\x04T\x03\x02\x02\x02\x06V\x03\x02\x02\x02\b' +
		'X\x03\x02\x02\x02\nm\x03\x02\x02\x02\fr\x03\x02\x02\x02\x0Et\x03\x02\x02' +
		'\x02\x10v\x03\x02\x02\x02\x12x\x03\x02\x02\x02\x14z\x03\x02\x02\x02\x16' +
		'|\x03\x02\x02\x02\x18~\x03\x02\x02\x02\x1A\x80\x03\x02\x02\x02\x1C\x87' +
		'\x03\x02\x02\x02\x1E\x89\x03\x02\x02\x02 \x8B\x03\x02\x02\x02"\x8E\x03' +
		'\x02\x02\x02$\x91\x03\x02\x02\x02&\x93\x03\x02\x02\x02(\x95\x03\x02\x02' +
		'\x02*\x98\x03\x02\x02\x02,\x9B\x03\x02\x02\x02.\x9D\x03\x02\x02\x020\x9F' +
		'\x03\x02\x02\x022\xA1\x03\x02\x02\x024\xA3\x03\x02\x02\x026\xA5\x03\x02' +
		'\x02\x028\xA7\x03\x02\x02\x02:\xA9\x03\x02\x02\x02<\xAB\x03\x02\x02\x02' +
		'>\xAD\x03\x02\x02\x02@\xB1\x03\x02\x02\x02B\xBD\x03\x02\x02\x02D\xC7\x03' +
		'\x02\x02\x02F\xD2\x03\x02\x02\x02H\xEC\x03\x02\x02\x02J\xEE\x03\x02\x02' +
		'\x02L\xF0\x03\x02\x02\x02N\xF6\x03\x02\x02\x02P\u0101\x03\x02\x02\x02' +
		'R\u0105\x03\x02\x02\x02TU\t\x02\x02\x02U\x05\x03\x02\x02\x02VW\t\x03\x02' +
		'\x02W\x07\x03\x02\x02\x02Xh\x07}\x02\x02Yg\x05B!\x02Z]\x05D"\x02[]\x05' +
		'H$\x02\\Z\x03\x02\x02\x02\\[\x03\x02\x02\x02]^\x03\x02\x02\x02^b\x07<' +
		'\x02\x02_c\x05H$\x02`c\n\x04\x02\x02ac\x05\b\x04\x02b_\x03\x02\x02\x02' +
		'b`\x03\x02\x02\x02ba\x03\x02\x02\x02cd\x03\x02\x02\x02db\x03\x02\x02\x02' +
		'de\x03\x02\x02\x02eg\x03\x02\x02\x02fY\x03\x02\x02\x02f\\\x03\x02\x02' +
		'\x02gj\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02\x02\x02ik\x03\x02\x02' +
		'\x02jh\x03\x02\x02\x02kl\x07\x7F\x02\x02l\t\x03\x02\x02\x02mn\x07b\x02' +
		'\x02no\b\x05\x02\x02op\x03\x02\x02\x02pq\b\x05\x03\x02q\v\x03\x02\x02' +
		'\x02rs\x07-\x02\x02s\r\x03\x02\x02\x02tu\x07/\x02\x02u\x0F\x03\x02\x02' +
		'\x02vw\x07#\x02\x02w\x11\x03\x02\x02\x02xy\x07`\x02\x02y\x13\x03\x02\x02' +
		'\x02z{\x07,\x02\x02{\x15\x03\x02\x02\x02|}\x071\x02\x02}\x17\x03\x02\x02' +
		'\x02~\x7F\x07\'\x02\x02\x7F\x19\x03\x02\x02\x02\x80\x81\x07?\x02\x02\x81' +
		'\x82\x07?\x02\x02\x82\x1B\x03\x02\x02\x02\x83\x84\x07#\x02\x02\x84\x88' +
		'\x07?\x02\x02\x85\x86\x07>\x02\x02\x86\x88\x07@\x02\x02\x87\x83\x03\x02' +
		'\x02\x02\x87\x85\x03\x02\x02\x02\x88\x1D\x03\x02\x02\x02\x89\x8A\x07(' +
		'\x02\x02\x8A\x1F\x03\x02\x02\x02\x8B\x8C\x07(\x02\x02\x8C\x8D\x07(\x02' +
		'\x02\x8D!\x03\x02\x02\x02\x8E\x8F\x07~\x02\x02\x8F\x90\x07~\x02\x02\x90' +
		'#\x03\x02\x02\x02\x91\x92\x07>\x02\x02\x92%\x03\x02\x02\x02\x93\x94\x07' +
		'@\x02\x02\x94\'\x03\x02\x02\x02\x95\x96\x07>\x02\x02\x96\x97\x07?\x02' +
		'\x02\x97)\x03\x02\x02\x02\x98\x99\x07@\x02\x02\x99\x9A\x07?\x02\x02\x9A' +
		'+\x03\x02\x02\x02\x9B\x9C\x07*\x02\x02\x9C-\x03\x02\x02\x02\x9D\x9E\x07' +
		'+\x02\x02\x9E/\x03\x02\x02\x02\x9F\xA0\x070\x02\x02\xA01\x03\x02\x02\x02' +
		'\xA1\xA2\x07]\x02\x02\xA23\x03\x02\x02\x02\xA3\xA4\x07_\x02\x02\xA45\x03' +
		'\x02\x02\x02\xA5\xA6\x07}\x02\x02\xA67\x03\x02\x02\x02\xA7\xA8\x07\x7F' +
		'\x02\x02\xA89\x03\x02\x02\x02\xA9\xAA\x07.\x02\x02\xAA;\x03\x02\x02\x02' +
		'\xAB\xAC\x07<\x02\x02\xAC=\x03\x02\x02\x02\xAD\xAE\x07?\x02\x02\xAE\xAF' +
		'\x07@\x02\x02\xAF?\x03\x02\x02\x02\xB0\xB2\x05\x06\x03\x02\xB1\xB0\x03' +
		'\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB3\xB4\x03' +
		'\x02\x02\x02\xB4\xBB\x03\x02\x02\x02\xB5\xB7\x070\x02\x02\xB6\xB8\x05' +
		'\x06\x03\x02\xB7\xB6\x03\x02\x02\x02\xB8\xB9\x03\x02\x02\x02\xB9\xB7\x03' +
		'\x02\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA\xBC\x03\x02\x02\x02\xBB\xB5\x03' +
		'\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBCA\x03\x02\x02\x02\xBD\xBE\t\x05' +
		'\x02\x02\xBE\xBF\x06!\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC1\b!\x04\x02' +
		'\xC1C\x03\x02\x02\x02\xC2\xC8\x05\x04\x02\x02\xC3\xC8\t\x06\x02\x02\xC4' +
		'\xC5\x07B\x02\x02\xC5\xC8\x07B\x02\x02\xC6\xC8\x04&\'\x02\xC7\xC2\x03' +
		'\x02\x02\x02\xC7\xC3\x03\x02\x02\x02\xC7\xC4\x03\x02\x02\x02\xC7\xC6\x03' +
		'\x02\x02\x02\xC8\xCE\x03\x02\x02\x02\xC9\xCD\x05\x04\x02\x02\xCA\xCD\x05' +
		'\x06\x03\x02\xCB\xCD\x07a\x02\x02\xCC\xC9\x03\x02\x02\x02\xCC\xCA\x03' +
		'\x02\x02\x02\xCC\xCB\x03\x02\x02\x02\xCD\xD0\x03\x02\x02\x02\xCE\xCC\x03' +
		'\x02\x02\x02\xCE\xCF\x03\x02\x02\x02\xCFE\x03\x02\x02\x02\xD0\xCE\x03' +
		'\x02\x02\x02\xD1\xD3\x07\x0F\x02\x02\xD2\xD1\x03\x02\x02\x02\xD2\xD3\x03' +
		'\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD5\x07\f\x02\x02\xD5\xD6\x03' +
		'\x02\x02\x02\xD6\xD7\b#\x04\x02\xD7G\x03\x02\x02\x02\xD8\xDE\x07)\x02' +
		'\x02\xD9\xDA\x07^\x02\x02\xDA\xDD\t\x07\x02\x02\xDB\xDD\n\b\x02\x02\xDC' +
		'\xD9\x03\x02\x02\x02\xDC\xDB\x03\x02\x02\x02\xDD\xE0\x03\x02\x02\x02\xDE' +
		'\xDF\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDF\xE1\x03\x02\x02\x02\xE0' +
		'\xDE\x03\x02\x02\x02\xE1\xED\x07)\x02\x02\xE2\xE8\x07$\x02\x02\xE3\xE4' +
		'\x07^\x02\x02\xE4\xE7\t\t\x02\x02\xE5\xE7\n\n\x02\x02\xE6\xE3\x03\x02' +
		'\x02\x02\xE6\xE5\x03\x02\x02\x02\xE7\xEA\x03\x02\x02\x02\xE8\xE9\x03\x02' +
		'\x02\x02\xE8\xE6\x03\x02\x02\x02\xE9\xEB\x03\x02\x02\x02\xEA\xE8\x03\x02' +
		'\x02\x02\xEB\xED\x07$\x02\x02\xEC\xD8\x03\x02\x02\x02\xEC\xE2\x03\x02' +
		'\x02\x02\xEDI\x03\x02\x02\x02\xEE\xEF\v\x02\x02\x02\xEFK\x03\x02\x02\x02' +
		'\xF0\xF1\x07b\x02\x02\xF1\xF2\b&\x05\x02\xF2\xF3\x03\x02\x02\x02\xF3\xF4' +
		'\b&\x06\x02\xF4\xF5\b&\x07\x02\xF5M\x03\x02\x02\x02\xF6\xF7\x07&\x02\x02' +
		'\xF7\xFB\x07}\x02\x02\xF8\xFC\x05H$\x02\xF9\xFC\x05\b\x04\x02\xFA\xFC' +
		'\n\x04\x02\x02\xFB\xF8\x03\x02\x02\x02\xFB\xF9\x03\x02\x02\x02\xFB\xFA' +
		'\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFB\x03\x02\x02\x02\xFD\xFE' +
		'\x03\x02\x02\x02\xFE\xFF\x03\x02\x02\x02\xFF\u0100\x07\x7F\x02\x02\u0100' +
		'O\x03\x02\x02\x02\u0101\u0103\x07^\x02\x02\u0102\u0104\n\v\x02\x02\u0103' +
		'\u0102\x03\x02\x02\x02\u0103\u0104\x03\x02\x02\x02\u0104Q\x03\x02\x02' +
		'\x02\u0105\u0106\n\v\x02\x02\u0106S\x03\x02\x02\x02\x19\x02\x03\\bdfh' +
		'\x87\xB3\xB9\xBB\xC7\xCC\xCE\xD2\xDC\xDE\xE6\xE8\xEC\xFB\xFD\u0103\b\x03' +
		'\x05\x02\x07\x03\x02\b\x02\x02\x03&\x03\t\x03\x02\x06\x02\x02';
    public static __ATN: ATN;
    public static get _ATN(): ATN {
        if (!ExpressionAntlrLexer.__ATN) {
            ExpressionAntlrLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrLexer._serializedATN));
        }

        return ExpressionAntlrLexer.__ATN;
    }

}

