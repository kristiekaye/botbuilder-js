/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/userTokenMappers";
import * as Parameters from "../models/parameters";
/** Class representing a UserToken. */
var UserToken = /** @class */ (function () {
    /**
     * Create a UserToken.
     * @param {TokenApiClientContext} client Reference to the service client.
     */
    function UserToken(client) {
        this.client = client;
    }
    UserToken.prototype.getToken = function (userId, connectionName, options, callback) {
        return this.client.sendOperationRequest({
            userId: userId,
            connectionName: connectionName,
            options: options
        }, getTokenOperationSpec, callback);
    };
    UserToken.prototype.getAadTokens = function (userId, connectionName, aadResourceUrls, options, callback) {
        return this.client.sendOperationRequest({
            userId: userId,
            connectionName: connectionName,
            aadResourceUrls: aadResourceUrls,
            options: options
        }, getAadTokensOperationSpec, callback);
    };
    UserToken.prototype.signOut = function (userId, options, callback) {
        return this.client.sendOperationRequest({
            userId: userId,
            options: options
        }, signOutOperationSpec, callback);
    };
    UserToken.prototype.getTokenStatus = function (userId, options, callback) {
        return this.client.sendOperationRequest({
            userId: userId,
            options: options
        }, getTokenStatusOperationSpec, callback);
    };
    return UserToken;
}());
export { UserToken };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getTokenOperationSpec = {
    httpMethod: "GET",
    path: "api/usertoken/GetToken",
    queryParameters: [
        Parameters.userId,
        Parameters.connectionName0,
        Parameters.channelId,
        Parameters.code
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TokenResponse
        },
        404: {
            bodyMapper: Mappers.TokenResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getAadTokensOperationSpec = {
    httpMethod: "POST",
    path: "api/usertoken/GetAadTokens",
    queryParameters: [
        Parameters.userId,
        Parameters.connectionName0,
        Parameters.channelId
    ],
    requestBody: {
        parameterPath: "aadResourceUrls",
        mapper: tslib_1.__assign({}, Mappers.AadResourceUrls, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "TokenResponse"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var signOutOperationSpec = {
    httpMethod: "DELETE",
    path: "api/usertoken/SignOut",
    queryParameters: [
        Parameters.userId,
        Parameters.connectionName1,
        Parameters.channelId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getTokenStatusOperationSpec = {
    httpMethod: "GET",
    path: "api/usertoken/GetTokenStatus",
    queryParameters: [
        Parameters.userId,
        Parameters.channelId,
        Parameters.include
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TokenStatus"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=userToken.js.map